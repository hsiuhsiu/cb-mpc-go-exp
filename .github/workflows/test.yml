name: Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Cache C++ build
      uses: actions/cache@v3
      with:
        path: cb-mpc/lib/Release
        key: ${{ runner.os }}-cbmpc-${{ hashFiles('cb-mpc/**/*.cpp', 'cb-mpc/**/*.h', 'cb-mpc/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cbmpc-

    - name: Build C++ library
      run: make build-cpp

    - name: Verify Go modules
      run: go mod verify

    - name: Run Go tests
      run: make test

    - name: Test examples compile
      run: |
        bash scripts/go_with_cpp.sh go build ./examples/agree_random
        bash scripts/go_with_cpp.sh go build ./examples/ecdsa2pc_mtls

    - name: Run security tests
      run: bash scripts/go_with_cpp.sh go test -v ./pkg/mpc -run "Malicious"

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted correctly:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: bash scripts/go_with_cpp.sh go vet ./...

    - name: Check for CGO isolation
      run: |
        # Ensure only internal/cgo imports "C" (exclude cb-mpc submodule)
        if grep -r 'import "C"' --include="*.go" . | grep -v "internal/cgo/" | grep -v "cb-mpc/"; then
          echo "ERROR: Found 'import \"C\"' outside of internal/cgo"
          exit 1
        fi
        echo "âœ… CGO properly isolated to internal/cgo"